""" Key bindings """

" Turn various timeout types on or off
set timeout " time out on :mappings and key codes
set ttimeout " time out on key codes
" Key sequence timeout in milliseconds
set timeoutlen=1000
set ttimeoutlen=100

" Number of milliseconds to wait before firing CursorHold and updating swap
" file. This is also used by the TagList plugin as the timeout for
" highlighting the tag where the cursor is. TODO: Hack TagList to separate the
" two. I don't want to be forcing swap updates too often.
" Default is 4000.
"set updatetime=500

" Map \ as <Leader>
let mapleader='\'

" Toggle enable/disable custom keymap in insert mode and search command line
" TODO: See if this does anything different from CTRL-^ in insert mode.
let g:alt_iminsert = 0
let g:alt_imsearch = 0
function! ToggleKeymap()
    if &iminsert == 0
        let &iminsert = g:alt_iminsert
        let g:alt_iminsert = 0
    else
        let g:alt_iminsert = &iminsert
        set iminsert=0
    endif

    if &imsearch == 0
        let &imsearch = g:alt_imsearch
        let g:alt_imsearch = 0
    else
        let g:alt_imsearch = &imsearch
        set imsearch=0
    endif
endfunction

" Mapping cheat sheat:
" map:  normal; visual; select; operator pending
" nmap: normal
" vmap: visual; select
" omap: operator pending
" xmap: visual
" smap: select
" map!: insert; command line
" imap: insert
" cmap: command line
" lmap: insert; command line; lang arg
" (normal mode = command mode)

" Set function key to turn off auto-indenting. This is disabled because I'd
" prefer something that can also turn it back on. See
" <http://vim.wikia.com/wiki/VimTip330>.
"nnoremap <F8> :setl noai nocin nosi inde=<CR>

" CamelCase-wise previous word deletion
function! IsDirectlyAfterLeadingWhitespace()
    if col('.') == 1
        return 0
    else
        let l:col = col('.') - 2
        let l:line_beginning = getline(line('.'))[0 : l:col]
        let l:result = (match(l:line_beginning, '^\s\+$') != -1)
        return l:result
    endif
endfunction

" Allow selection of pasted text with <Leader>gv, the way old selection is
" reselected with gv.
" From <http://vim.wikia.com/wiki/Selecting_your_pasted_text>.
nnoremap <expr> <Leader>gv '`[' . strpart(getregtype(), 0, 1) . '`]'

" Map \ for global/selection search and replace; after replacement is done,
" move cursor back to original location with ``.
" TODO: undoing afterward puts the cursor back to the location of the last
" change. Find some way to fix this. First, figure out semantically correct
" determination of where the cursor *should* go (both when executing this and
" when undoing it). See
" <http://vim.wikia.com/wiki/Restore_the_cursor_position_after_undoing_text_change_made_by_a_script>.
nnoremap \\ :%s//g<Bar>norm!``<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
" In visual mode, '<,'> should be inserted automatically.
vnoremap \\ :s//g<Bar>norm!``<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>\%V

" Map Opt+Return to send Return without continuing comments on the next line.
" Also map Shift+Return the same; for some reason gvim in Windows doesn't run
" the mapping on Alt+Return, even though it does recognize it when I preface
" it with <C-V>.
" Raimondi helped fix this so it wouldn't return to the beginning of the line.
inoremap <silent> <A-CR> <C-o>:let b:fo=&fo<Bar>set fo-=r<CR><CR>x<Backspace><C-o>:let &fo=b:fo<Bar>normal! gi<CR>
inoremap <silent> <S-CR> <C-o>:let b:fo=&fo<Bar>set fo-=r<CR><CR>x<Backspace><C-o>:let &fo=b:fo<Bar>normal gi<CR>
cnoremap <A-CR> <CR>
cnoremap <S-CR> <CR>

" CamelCase word motion
" -- see <http://vim.wikia.com/wiki/Moving_through_camel_case_words>
"    and <http://www.vim.org/scripts/script.php?script_id=1905>
" I used to have these mapped to the standard w/b/e, but now I'd rather use w/b/e for their normal uses and
" ,w/,b/,e or Ctrl+arrows or Alt+h/j for CamelCaseMotion. Unfortunately, if
" you map *anything* to any <Plug>CamelCaseMotion_* function, the plugin won't
" define ,w/,b/,e. Since I have several bindings to that plugin's functions, I
" need to define those manually here.
map <silent> ,w <Plug>CamelCaseMotion_w
map <silent> ,b <Plug>CamelCaseMotion_b
map <silent> ,e <Plug>CamelCaseMotion_e

" A very nice sequence Raimondi gave me, which (when the cursor is on a brace
" or other matchable delimiter) deletes the braces (and the lines they're on)
" and decreases the indent of what they used to contain. Clobbers marks a and
" A.
" TODO: Make this work with things like Ruby and Objective-C block
" delimiters. Currently this only detects (, [, or {.
function! Unblockify()
    let l:is_on_last_line = 0
    let l:current_char = getline('.')[col('.')-1]
    let l:is_beginning_block_delim = l:current_char =~ '[([{]'
    if ! l:is_beginning_block_delim && !(l:current_char =~ '[)\]}]')
        " TODO: Find beginning of current block and use that as start
        return
    endif

    " Set mark A to beginning position
    normal! mA
    " Go to end delimiter, if not already there
    if ! l:is_beginning_block_delim
        normal! %
    endif
    " Set mark a to beginning delimiter position
    normal! ma
    " Go to end delimiter
    normal! %
    " If this is the last line, dd will cause the cursor to move up
    if line('.') == line('$')
        let l:is_on_last_line = 1
    endif
    " Delete end delimiter
    normal! dd
    " Move up, if necessary
    if ! l:is_on_last_line
        normal! k
    endif
    " Select contents of delimiters
    normal! V`aj
    " Deindent
    normal! <
    " Delete beginning delimiter
    normal! kdd
    " Restore position
    if ! l:is_beginning_block_delim
        if l:is_on_last_line
            normal! G
        else
            normal! `A
        endif
    endif
endfunction

" [\ and ]\ switch buffers
" TODO: Make these ignore NERDTree, quickfix, dbext, and other annoying
" buffers.
nnoremap <silent> [\ :bN<CR>
nnoremap <silent> ]\ :bn<CR>

" Find number of listed buffers
function! CountListedBuffers()
  return len(filter(range(1, bufnr("$")), 'buflisted(v:val)'))
endfunction

" TODO (next two functions): Catch when user cancels and act accordingly

" Close buffer but keep window open
function! DeleteBufferOnly()
    if CountListedBuffers() != 1
        if bufexists(0) && buflisted(0) " alternate buffer exists and is listed
            buffer #
            confirm bdelete #
        else
            bprevious
            confirm bdelete #
        endif
    else " this is the only buffer
        enew
        confirm bdelete #
    endif
endfunction

nnoremap <silent> <Leader>q :call DeleteBufferOnly()<CR>

" Close buffer and current window
" TODO: Catch last open window
function! DeleteBufferAndClose()
    bprevious
    confirm bdelete #
    close
endfunction

" Unfortunately <D-w> seems to be set in Cocoa, and is unable to occur in a
" binding after another character.
nnoremap <silent> <Leader>Q :call DeleteBufferAndClose()<CR>

" Preserve functionality of `,` while allowing it to be used as a prefix char
noremap ,, ,
noremap <Leader>, ,
noremap <Leader>; ,

" Surround
nmap S ys
nmap SS yss

" Change/delete selected text without putting it in a register
noremap ,c "_c
noremap ,C "_C
noremap ,d "_d
noremap ,D "_D
noremap ,r "_r
noremap ,R "_R
" I never really use the default s or S, and I've decided to use S for
" surround to match its visual mapping. Besides, now that I've installed
" easymotion, I'd like to use ,s for its bidirectional f/F-like action.
"noremap ,s "_s
" ,S is really the same as ys/S, since that is nondestructive.
noremap ,S ys
noremap ,x "_x
noremap ,X "_X

" Delete selected text without putting it in a register; then paste over it
vnoremap ,p "_dP
vnoremap ,P "_dP

" ZoomWin - map <C-w><C-o> to function like <C-w>o (which zooms/unzooms
" window)
nmap <C-w><C-o> <C-w>o

" EasyMotion
let g:EasyMotion_do_mapping = 1
" I'd like to use , for easymotion-prefix, but I already have a few things
" (e.g. ,w) that it conflicts with.
map <Leader>e <Plug>(easymotion-prefix)

" These are taken by CamelCaseMotion. Perhaps I don't really need that plugin
" anymore (or I could just use some of my other mappings for it, like
" Ctrl+arrows or Meta+j/k). But for now I can just use <Leader>ew/b/e for
" easymotion.
" TODO: I see now that CamelCaseMotion doesn't have an equivalent for ge. We
" might want to implement that and send it to Ingo.
" TODO: It appears that mapping easymotion functions in this way causes them
" not to be mapped under easymotion-prefix; thus in the current config the
" only easymotion functions to work with <Leader>e are -w, -b, and -e. If we
" map keys to existing key sequences rather than <Plug>..., this doesn't
" happen.  Find a good way to fix this.
"map ,w  <Plug>(easymotion-w)
"map ,b  <Plug>(easymotion-b)
"map ,e  <Plug>(easymotion-e)

map ,f  <Plug>(easymotion-f)
map ,F  <Plug>(easymotion-F)
map ,t  <Plug>(easymotion-t)
map ,T  <Plug>(easymotion-T)
map ,W  <Plug>(easymotion-W)
map ,B  <Plug>(easymotion-B)
map ,E  <Plug>(easymotion-E)
map ,ge <Plug>(easymotion-ge)
map ,gE <Plug>(easymotion-gE)
map ,j  <Plug>(easymotion-j)
map ,k  <Plug>(easymotion-k)
map ,n  <Plug>(easymotion-n)
map ,N  <Plug>(easymotion-N)
map ,s  <Plug>(easymotion-s)

" Put line <count> lines above cursor (default 1) at top of window.
nnoremap <silent> <Leader>zt :<C-u>exec 'normal! ' . v:count . 'kzt' . v:count . 'j'<CR>

" Put line <count> lines above cursor (default 1) at top of window.
nnoremap <silent> <Leader>zb :<C-u>exec 'normal! ' . v:count . 'jzb' . v:count . 'k'<CR>

" From Ben Fritz on vim-use; use <C-Space> in normal, visual, and
" operator pending modes to cycle between no numbering, relative numbering,
" relative numbering except current line absolute, and absolute numbering.
" TODO: Bugs:
" - in operator-pending mode, the terminal cursor moves to the end of the text
"   on the screen, even though Vim's insertion point doesn't move. Ben thinks
"   this is a bug in Vim itself; he thinks he reported it, but can't find it
"   now.
" - numbering stays on after it's needed. Ben suggested using a
"   CursorHold/CursorMoved autocmd to restore the status quo.
" - <C-Space> only works in GVim; and <C-@> only works in terminal Vim, unless
"   you actually use the 2 key.
if exists('+relativenumber')
  nnoremap <expr> <C-@> CycleLNum()
  nnoremap <expr> <C-Space> CycleLNum()
  xnoremap <expr> <C-@> CycleLNum()
  xnoremap <expr> <C-Space> CycleLNum()
  onoremap <expr> <C-@> CycleLNum()
  onoremap <expr> <C-Space> CycleLNum()

  " function to cycle between relative, normal, and no line numbering
  " Modified by EAC; I don't want relative/absolute or absolute numbering.
  func! CycleLNum()
    "if &l:rnu && !&l:nu
    "  setlocal nu
    "elseif &l:rnu && &l:nu
    "  setlocal nornu
    "elseif &l:nu && !&l:rnu
    "  setlocal nonu
    "else
    "  setlocal rnu
    "endif
    if &l:rnu
      setlocal nornu nonu
    else
      setlocal rnu nonu
    endif
    " sometimes (like in op-pending mode) the redraw doesn't happen
    " automatically
    redraw
    " do nothing, even in op-pending mode
    return ""
  endfunc
endif

" Use <Leader>c to change directory to current buffer's
noremap <Leader>c :cd %:p:h<CR>

" Use <Leader>l to list buffers
noremap <Leader>l :ls<CR>

" Use <Leader>b to start a bufdo command line that keeps highlighting active
" in the buffers it touches, even if they haven't been loaded yet. Also
" restores the # and % buffers afterward.
noremap <Leader>b :<C-u>let g:bufdo_bufnr=bufnr('%') \| let g:bufdo_bufnr_prev=bufnr('#') \| bufdo set eventignore-=Syntax \|  \| exec 'buffer '.g:bufdo_bufnr_prev \| exec 'buffer '.g:bufdo_bufnr<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" Mappings to change settings related to hard tabs/spaces
nnoremap <Leader><Tab> :set listchars-=tab:→\  listchars+=tab:\ \  noexpandtab ts=8 sts=8 sw=8<CR>
nnoremap <Leader><C-o> :set listchars-=tab:\ \  listchars+=tab:→\  expandtab ts=8 sts=4 sw=4<CR>
nnoremap <Leader><C-p> :set listchars-=tab:→\  listchars+=tab:\ \  noexpandtab ts=4 sts=4 sw=4<CR>
