--- setcolors-ORIG.vim	2010-11-01 00:59:21.000000000 -0500
+++ setcolors.vim	2010-11-01 00:16:42.000000000 -0500
@@ -4,6 +4,7 @@
 "   F8                next scheme
 "   Shift-F8          previous scheme
 "   Alt-F8            random scheme
+"   Shift-Alt-F8      show current scheme name (added by EAC)
 " Set the list of color schemes used by the above (default is 'all'):
 "   :SetColors all              (all $VIMRUNTIME/colors/*.vim)
 "   :SetColors my               (names built into script)
@@ -16,7 +17,9 @@
 endif
 
 let loaded_setcolors = 1
-let s:mycolors = ['slate', 'torte', 'darkblue', 'delek', 'murphy', 'elflord', 'pablo', 'koehler']  " colorscheme names that we use to set color
+"let s:mycolors = ['slate', 'torte', 'darkblue', 'delek', 'murphy', 'elflord', 'pablo', 'koehler']  " colorscheme names that we use to set color
+" Let's use s:SetColors('all') below to read all the colors instead of just
+" these few.
 
 " Set list of color scheme names that we will use, except
 " argument 'now' actually changes the current color scheme.
@@ -28,9 +31,21 @@
       echo '  '.join(map(s:mycolors[i : i+4], 'printf("%-14s", v:val)'))
       let i += 5
     endwhile
+    call input('Press <Enter> to continue.')
   elseif a:args == 'all'
     let paths = split(globpath(&runtimepath, 'colors/*.vim'), "\n")
     let s:mycolors = map(paths, 'fnamemodify(v:val, ":t:r")')
+    " Case-insensitive sort
+    function! l:CaseInsensitiveCompare(lhs, rhs)
+      if a:lhs ==? a:rhs
+        return 0
+      elseif a:lhs <? a:rhs
+        return -1
+      else
+        return 1
+      endif
+    endfunction
+    call sort(s:mycolors, 'l:CaseInsensitiveCompare')
     echo 'List of colors set from all installed color schemes'
   elseif a:args == 'my'
     let c1 = 'default elflord peachpuff desert256 breeze morning'
@@ -75,6 +90,8 @@
     else
       let current += how
       if !(0 <= current && current < len(s:mycolors))
+        echo 'Number of colors: ' . len(s:mycolors) . '. Current color (' . current . ') out of bounds.'
+        call input('Press <Enter> to continue.')
         let current = (how>0 ? 0 : len(s:mycolors)-1)
       endif
     endif
@@ -90,7 +107,9 @@
     echo 'Error: colorscheme not found:' join(missing)
   endif
   if (a:echo_color)
-    echo g:colors_name
+    if exists('g:colors_name')
+      echo g:colors_name
+    endif
   endif
 endfunction
 
@@ -115,5 +134,28 @@
   let nowcolors = 'elflord morning desert evening pablo'
   execute 'colorscheme '.split(nowcolors)[i]
   redraw
-  echo g:colors_name
+  if exists('g:colors_name')
+    echo g:colors_name
+  endif
+endfunction
+
+function! ShowCurrentColor()
+  if len(s:mycolors) == 0
+    call s:SetColors('all')
+  endif
+  if exists('g:colors_name')
+    let current = index(s:mycolors, g:colors_name)
+    echo 'Current color: name: ' . g:colors_name . '; index: '. current . ' out of ' . len(s:mycolors) . '.'
+  else
+    echo 'No current color found.'
+  endif
 endfunction
+
+nnoremap <S-A-F8> :call ShowCurrentColor()<CR>
+
+if has('gui_running')
+    silent call s:SetColors('all')
+else
+    " Add other schemes that work OK in terminal
+    silent call s:SetColors('default')
+endif
